/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import java.awt.CardLayout;
import java.awt.Toolkit;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/*
 * DICA! SEMPRE adicione as classes abaixo nos componentes do aplicativo.
 */
import Control.PopUps;
import static Control.PopUps.showConfirm;
import Model.DbConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author andre.ataide
 */
public class Main extends javax.swing.JFrame {

    // Faz conexão DAO
    private DbConnection dbConnection = new DbConnection();

    // Inicializa atributos DAO
    private Connection conn = null;
    private PreparedStatement pstm = null;
    private ResultSet res = null;

    /**
     * Creates new form Main
     */
    public Main() {
        // Inicializa componentes da interface gráfica
        initComponents();

        // Altera o ícone do jFrame
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("../images/box_flat.png")));

        /*
         * As linhas abaixo marcadas com o comentário "Estética → ", alteram um pouco a estética da tabela.
         * Elas não interferem, além do visual, no funcionamento do aplicativo.
         */
        // Estética → Centraliza conteúdo das células de cabeçalho
        JTableHeader header = tableListAll.getTableHeader();
        DefaultTableCellRenderer tableHeader = (DefaultTableCellRenderer) header.getDefaultRenderer();
        tableHeader.setHorizontalAlignment(SwingConstants.CENTER);

        // Estética → Centraliza verticalmente o conteúdo das células
        DefaultTableCellRenderer tableCell = new DefaultTableCellRenderer();
        tableCell.setHorizontalAlignment(SwingConstants.CENTER);

        // Estética → Define altura padrão das linhas
        tableListAll.setRowHeight(25);

        // Estética → Centraliza os conteúdos das células da coluna[0] Id
        tableListAll.getColumnModel().getColumn(0).setCellRenderer(tableCell);

        // Estética → Centraliza os conteúdos das células da coluna[1] Data
        tableListAll.getColumnModel().getColumn(1).setCellRenderer(tableCell);

        // Estética → Centraliza os conteúdos das células da coluna[3] Status
        tableListAll.getColumnModel().getColumn(3).setCellRenderer(tableCell);

        // Chama método que lista dados dentro da tabela
        readAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainCards = new javax.swing.JPanel();
        panelReadAll = new javax.swing.JPanel();
        btnNew = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableListAll = new javax.swing.JTable();
        panelUpdate = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panelForm1 = new View.panelForm();
        panelRead = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lblViewDescription = new javax.swing.JLabel();
        lblViewDate = new javax.swing.JLabel();
        lblViewType = new javax.swing.JLabel();
        lblViewId = new javax.swing.JLabel();
        lblViewName = new javax.swing.JLabel();
        lblViewStatus = new javax.swing.JLabel();
        btnViewEdit = new javax.swing.JButton();
        btnViewDelete = new javax.swing.JButton();
        btnListAll = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtViewDescription = new javax.swing.JTextArea();
        txtViewId = new javax.swing.JTextField();
        txtViewStatus = new javax.swing.JTextField();
        txtViewDate = new javax.swing.JTextField();
        txtViewType = new javax.swing.JTextField();
        txtViewName = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuListAll = new javax.swing.JMenuItem();
        mnuAdd = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mnuHelpSupport = new javax.swing.JMenuItem();
        mnuHelpUpdates = new javax.swing.JMenuItem();
        mnuHelpSite = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cadatro de Trecos");
        setPreferredSize(new java.awt.Dimension(640, 520));

        pnlMainCards.setLayout(new java.awt.CardLayout());

        btnNew.setText("Novo");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnView.setText("Visualizar Selecionado");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        tableListAll.setAutoCreateRowSorter(true);
        tableListAll.setFont(tableListAll.getFont().deriveFont(tableListAll.getFont().getSize()+3f));
        tableListAll.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Data", "Nome", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableListAll.setColumnSelectionAllowed(true);
        tableListAll.setMinimumSize(new java.awt.Dimension(100, 100));
        tableListAll.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableListAll.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tableListAll);
        tableListAll.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tableListAll.getColumnModel().getColumnCount() > 0) {
            tableListAll.getColumnModel().getColumn(0).setMinWidth(30);
            tableListAll.getColumnModel().getColumn(0).setPreferredWidth(50);
            tableListAll.getColumnModel().getColumn(0).setMaxWidth(100);
            tableListAll.getColumnModel().getColumn(2).setMinWidth(50);
            tableListAll.getColumnModel().getColumn(2).setPreferredWidth(350);
            tableListAll.getColumnModel().getColumn(2).setMaxWidth(600);
        }

        javax.swing.GroupLayout panelReadAllLayout = new javax.swing.GroupLayout(panelReadAll);
        panelReadAll.setLayout(panelReadAllLayout);
        panelReadAllLayout.setHorizontalGroup(
            panelReadAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReadAllLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelReadAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelReadAllLayout.createSequentialGroup()
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnView))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelReadAllLayout.setVerticalGroup(
            panelReadAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReadAllLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelReadAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew)
                    .addComponent(btnView))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlMainCards.add(panelReadAll, "cardReadAll");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel1.setText("Editar Treco");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Altere apenas os dados necessários mantendo os outros intactos.");

        javax.swing.GroupLayout panelUpdateLayout = new javax.swing.GroupLayout(panelUpdate);
        panelUpdate.setLayout(panelUpdateLayout);
        panelUpdateLayout.setHorizontalGroup(
            panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUpdateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                    .addGroup(panelUpdateLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelForm1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelUpdateLayout.setVerticalGroup(
            panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUpdateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelForm1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlMainCards.add(panelUpdate, "cardEdit");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Visualizar Registro");

        lblViewDescription.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblViewDescription.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblViewDescription.setText("Descrição:");

        lblViewDate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblViewDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblViewDate.setText("Data:");

        lblViewType.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblViewType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblViewType.setText("Tipo:");

        lblViewId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblViewId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblViewId.setText("ID:");

        lblViewName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblViewName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblViewName.setText("Nome:");

        lblViewStatus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblViewStatus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblViewStatus.setText("Status:");

        btnViewEdit.setText("Editar Registro");

        btnViewDelete.setText("Apagar Registro");
        btnViewDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDeleteActionPerformed(evt);
            }
        });

        btnListAll.setText("Listar Todos");
        btnListAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAllActionPerformed(evt);
            }
        });

        txtViewDescription.setEditable(false);
        txtViewDescription.setColumns(20);
        txtViewDescription.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtViewDescription.setLineWrap(true);
        txtViewDescription.setRows(5);
        txtViewDescription.setWrapStyleWord(true);
        txtViewDescription.setBorder(null);
        jScrollPane1.setViewportView(txtViewDescription);

        txtViewId.setEditable(false);
        txtViewId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtViewId.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        txtViewStatus.setEditable(false);
        txtViewStatus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtViewStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtViewStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtViewStatusActionPerformed(evt);
            }
        });

        txtViewDate.setEditable(false);
        txtViewDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtViewDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtViewDateActionPerformed(evt);
            }
        });

        txtViewType.setEditable(false);
        txtViewType.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtViewName.setEditable(false);
        txtViewName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtViewName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtViewNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelReadLayout = new javax.swing.GroupLayout(panelRead);
        panelRead.setLayout(panelReadLayout);
        panelReadLayout.setHorizontalGroup(
            panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReadLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 229, Short.MAX_VALUE)
                .addComponent(btnListAll)
                .addGap(16, 16, 16))
            .addGroup(panelReadLayout.createSequentialGroup()
                .addContainerGap(150, Short.MAX_VALUE)
                .addGroup(panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelReadLayout.createSequentialGroup()
                        .addComponent(lblViewId, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtViewId, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblViewStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtViewStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReadLayout.createSequentialGroup()
                        .addComponent(lblViewDate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtViewDate, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReadLayout.createSequentialGroup()
                        .addComponent(lblViewType, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtViewType, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(panelReadLayout.createSequentialGroup()
                            .addComponent(btnViewEdit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnViewDelete))
                        .addGroup(panelReadLayout.createSequentialGroup()
                            .addGroup(panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblViewName, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblViewDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtViewName)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)))))
                .addContainerGap(165, Short.MAX_VALUE))
        );
        panelReadLayout.setVerticalGroup(
            panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReadLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btnListAll))
                .addGap(31, 31, 31)
                .addGroup(panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblViewId)
                    .addComponent(lblViewStatus)
                    .addComponent(txtViewId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtViewStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblViewDate)
                    .addComponent(txtViewDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblViewType)
                    .addComponent(txtViewType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblViewName)
                    .addComponent(txtViewName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblViewDescription)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnViewEdit)
                    .addComponent(btnViewDelete))
                .addContainerGap(95, Short.MAX_VALUE))
        );

        pnlMainCards.add(panelRead, "cardView");

        mnuFile.setText("Arquivo");

        mnuListAll.setText("Listar todos...");
        mnuListAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuListAllActionPerformed(evt);
            }
        });
        mnuFile.add(mnuListAll);

        mnuAdd.setText("Novo...");
        mnuAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddActionPerformed(evt);
            }
        });
        mnuFile.add(mnuAdd);

        mnuExit.setText("Sair");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuExit);

        jMenuBar1.add(mnuFile);

        mnuHelp.setText("Ajuda");

        mnuHelpSupport.setText("Suporte");
        mnuHelp.add(mnuHelpSupport);

        mnuHelpUpdates.setText("Atualizações");
        mnuHelp.add(mnuHelpUpdates);

        mnuHelpSite.setText("Site");
        mnuHelp.add(mnuHelpSite);

        jMenuBar1.add(mnuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainCards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainCards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(650, 448));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnuListAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuListAllActionPerformed

        // Exibir o painel "card1"
        openCard("cardReadAll");

    }//GEN-LAST:event_mnuListAllActionPerformed

    private void mnuAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddActionPerformed

        // Exibir o painel "card1"
        openCard("card2");

    }//GEN-LAST:event_mnuAddActionPerformed

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed

        // Fecha o aplicativo usando poupu de confirmação
        exitApp();

    }//GEN-LAST:event_mnuExitActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        loadSelected("view");
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnListAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAllActionPerformed
        // Mostra o card que lista todos os registros
        openCard("cardReadAll");
    }//GEN-LAST:event_btnListAllActionPerformed

    private void btnViewDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDeleteActionPerformed
        // Converte o Id do campo para inteiro e chama o método para apagar
        deleteData(Integer.parseInt(txtViewId.getText()));
    }//GEN-LAST:event_btnViewDeleteActionPerformed

    private void txtViewStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtViewStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtViewStatusActionPerformed

    private void txtViewDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtViewDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtViewDateActionPerformed

    private void txtViewNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtViewNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtViewNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnListAll;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnView;
    private javax.swing.JButton btnViewDelete;
    private javax.swing.JButton btnViewEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblViewDate;
    private javax.swing.JLabel lblViewDescription;
    private javax.swing.JLabel lblViewId;
    private javax.swing.JLabel lblViewName;
    private javax.swing.JLabel lblViewStatus;
    private javax.swing.JLabel lblViewType;
    private javax.swing.JMenuItem mnuAdd;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenuItem mnuHelpSite;
    private javax.swing.JMenuItem mnuHelpSupport;
    private javax.swing.JMenuItem mnuHelpUpdates;
    private javax.swing.JMenuItem mnuListAll;
    private View.panelForm panelForm1;
    private javax.swing.JPanel panelRead;
    private javax.swing.JPanel panelReadAll;
    private javax.swing.JPanel panelUpdate;
    private javax.swing.JPanel pnlMainCards;
    private javax.swing.JTable tableListAll;
    private javax.swing.JTextField txtViewDate;
    private javax.swing.JTextArea txtViewDescription;
    private javax.swing.JTextField txtViewId;
    private javax.swing.JTextField txtViewName;
    private javax.swing.JTextField txtViewStatus;
    private javax.swing.JTextField txtViewType;
    // End of variables declaration//GEN-END:variables

    // Abre um card 
    public void openCard(String cardName) {
        // Códigos para exibir o painel "card1"
        CardLayout card = (CardLayout) pnlMainCards.getLayout();
        card.show(pnlMainCards, cardName);
    }

    // Lê todos os registros válidos e popula a tabela
    private void readAll() {
        try {

            // Acessa a tabela e o model (dados) dela
            DefaultTableModel tableModel = (DefaultTableModel) tableListAll.getModel();

            // Remove as linhas "default" da tabela, se necessário
            tableModel.setNumRows(0);

            // Faz conexão com o banco de dados
            conn = dbConnection.dbConnect();

            // SQL de consulta ao banco de dados
            String sql = "SELECT t_id, t_date, t_name, t_status FROM trecos WHERE t_status != 'del'";

            // Prepara, filtra e sanitiza o SQL antes de executar
            pstm = conn.prepareStatement(sql);

            // Executa query e armazena no "Resultset"
            res = pstm.executeQuery();

            // Loop para receber os dados de cada linha do resultado
            while (res.next()) {

                // Adiciona e exibe dados em uma linha da tabela
                tableModel.addRow(new Object[]{
                    res.getInt("t_id"),
                    res.getDate("t_date"),
                    res.getString("t_name"),
                    res.getString("t_status")
                });

            }

        } catch (SQLException error) {
            // Se ocorrer erro de SQL, exibe no popup
            PopUps.showError("Main.readAll\n" + error);
        } finally {
            // Fecha conexões e recursos abertos
            dbConnection.dbClose(conn, pstm, res);
        }
    }

    // Carrega o registro selecionado na tabela
    private void loadSelected(String action) {
        try {

            // Obtém a linha selecionada na tabela
            int selected = tableListAll.getSelectedRow();

            // Se nada foi selecionado ao clicar em um botão...
            if (selected < 0) {
                // Mostre uma mensagem de erro
                PopUps.showAlert("Selecione um item primeiro.");

                // Se selecionou uma linha...
            } else {

                // Obtém o valor do Id da linha selecionada
                int selectedId = (int) tableListAll.getModel().getValueAt(selected, 0);

                // SQL que obtém o registro à partir do ID
                String sql = "SELECT * FROM trecos WHERE t_id = ? AND t_status != 'del'";

                // Conexão com o banco de dados
                conn = dbConnection.dbConnect();

                // Preparar a query
                pstm = conn.prepareStatement(sql);

                // Substitui valores variáveis no SQL
                pstm.setInt(1, selectedId);

                // Executa a query e armazena resultado(s)
                res = pstm.executeQuery();

                // Carrega o método correto de acordo com a ação escolhida
                switch (action) {
                    case "view" ->
                        viewData(res);
                    case "edit" ->
                        editData(res);
                    default ->
                        PopUps.showAlert("Nenhum registro foi selecinado.");
                }

            }

        } catch (SQLException error) {
            // Se ocorrer erro de SQL, exibe no popup
            PopUps.showError("Main.loadSelected\n" + error);
        } finally {
            // Fecha conexões e recursos abertos      
            dbConnection.dbClose(conn, pstm, res);
        }
    }

    // Exibe dados do registro no painel de visualização de registro único
    private void viewData(ResultSet res) {
        try {

            /// Recebe o registro do banco de dados
            res.next();

            // Exibe nos campos dor formulário de visualização
            txtViewId.setText(res.getString("t_id"));
            txtViewDate.setText(res.getString("t_date"));
            txtViewType.setText(res.getString("t_type"));
            txtViewName.setText(res.getString("t_name"));
            txtViewStatus.setText(res.getString("t_status"));
            txtViewDescription.setText(res.getString("t_description"));

            // Mostra o card com os dados do registro
            openCard("cardView");

        } catch (SQLException error) {
            // Se ocorrer erro de SQL, exibe no popup
            PopUps.showError("Main.viewData\n" + error);
        } finally {
            // Fecha conexões e recursos abertos      
            dbConnection.dbClose(res);
        }
    }

    // Edita dados do registro
    private void editData(ResultSet res) {

    }

    // Apaga o registro selecionado
    private void deleteData(int dataId) {

        // Cria caixa de diálogo popup para confirmação
        int dialogButton = PopUps.showConfirm("Oooops!", "Tem certeza que deseja apagar o registro?");

        // Se clicou em Sim
        if (dialogButton == JOptionPane.YES_OPTION) {

            try {

                // Query que altera o status do registro para apagado
                String sql = "UPDATE trecos SET t_status = 'del' WHERE t_id = ?";

                // Conexão com o banco de dados
                conn = dbConnection.dbConnect();

                // Preparar a query
                pstm = conn.prepareStatement(sql);

                // Substitui valores variáveis no SQL
                pstm.setInt(1, dataId);

                // Executa a query
                pstm.executeUpdate();

                // Atualiza a listagem de registros
                readAll();

                // Mostra a listagem de registros
                openCard("cardReadAll");

            } catch (SQLException error) {
                // Se ocorrer erro de SQL, exibe no popup
                PopUps.showError("Main.deleteData\n" + error);
            } finally {
                // Fecha conexões e recursos abertos      
                dbConnection.dbClose(conn, pstm, null);
            }

            // Se clicou em Não
        } else {

            // Fecha o popup
            remove(dialogButton);
        }

    }

    // Fecha o aplicativo com um popup de confirmação
    public void exitApp() {

        // Cria caixa de diálogo popup
        int dialogButton = PopUps.showConfirm("Saindo...", "Tem certeza que deseja sair do aplicativo?");

        // Se clicou em Sim
        if (dialogButton == JOptionPane.YES_OPTION) {

            // Fecha aplicativo
            System.exit(0);

            // Se clicou em Não
        } else {

            // Fecha o popup
            remove(dialogButton);
        }
    }
}
